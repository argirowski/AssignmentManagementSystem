🎯 Build a Assignment Management System

📌 Objective:
➡️ Develop a Assignment Management System using the following technologies:
🔹 Backend: .NET Core with Dapper for database interaction.
🔹 Frontend: React with TypeScript and Redux for state management.
🔹 Patterns: Implement the Repository Pattern with the Unit of Work Pattern.
🔹 Relationships: Include a one-to-many relationship between employees and assignments (One employee can have many assignments. Each assignment, however, belongs to exactly one employee), and a one-to-many relationship between statuses and assignments (One status can be assigned to many assignments, but each assignment has only one status). Also include a many-to-many relationship between assignments and categories (A single assignment can have many categories, and a single category can belong to multiple assignments), implemented through a one-to-many relationship between assignments and assignment-category join entities.

🧱 ENTITY: Employees
One Employee can have many Assignments.
Cannot delete if referenced by an assignment.

🧱 ENTITY: Statuses
One Status can be linked to many Assignments.
Cannot delete if in use (only if not used by an assignment).

🧱 ENTITY: Categories
Categories are shared tags, and linked to assignments via a many-to-many join table.
Cannot delete if in use (only if not used by an assignment).

🧱 ENTITY: Assignments
Links to:
One Employee
One Status
Many Categories via AssignmentCategories

🧱 ENTITY: AssignmentCategories (Join Table)
Many-to-many relationship between Assignments and Categories
When an assignment is deleted, its category links are deleted automatically via ON DELETE CASCADE.

🔗 Relationship Summary

Relationship						Type
Employee → Assignments				One-to-Many
Status → Assignments				One-to-Many
Category ↔ Assignment				Many-to-Many
Assignment → AssignmentCategories	One-to-Many (join)

This system should demonstrate the ability to manage relationships in a database and reflect them in both backend logic and frontend state management

📌 Functional Requirements:
➡️ Employee Features:
🔹 Each assignment should belong to exactly one employee.
🔹 Each employee should have:
✔ Employee ID: Unique identifier.
✔ FullName: The employee's full name (used for display purposes).
✔ Email: The employee's email address (must be unique to prevent duplicates).

➡️ Assignment Features:
🔹 Each assignment should have:
✔ Assignment ID: Unique identifier.
✔ Title: Short title for the assignment.
✔ Description: Detailed information about the assignment.
✔ IsCompleted: Boolean flag indicating whether the assignment is completed.
✔ CreatedAt: Timestamp of assignment creation.
✔ EmployeeId: Link to the employee who owns the assignment.
✔ StatusId: Link to the status of the assignment.
✔ Categories: Ability to associate multiple categories with an assignment (Many-to-Many relationship).

➡️ Category Features:
✔ A category can belong to multiple assignments, and an assignment can have multiple categories (Many-to-Many relationship).
🔹 Each category should have:
✔ Category ID: Unique identifier.
✔ Name: Name of the category.

➡️ Status Features:
✔ Each assignment must be linked to a status.
✔ A status can be shared by multiple assignments.
🔹 Each status should have:
✔ Status ID: Unique identifier.
✔ Description: Description of the status.

➡️ Assignment State Management:
✔ Use Redux to manage application state, with actions and reducers for assignments, employees, statuses, and categories.
✔ Dispatch actions such as ADD_ASSIGNMENT, UPDATE_ASSIGNMENT, DELETE_ASSIGNMENT, SET_ASSIGNMENTS, SET_EMPLOYEES, SET_STATUSES, and SET_CATEGORIES.
✔ Fetch data from the API using asynchronous actions (e.g., with redux-thunk or redux-toolkit) and update the store accordingly.
✔ Connect React components to the Redux store using useSelector to access state and useDispatch to trigger actions.

➡️ Routing with React Router:
✔ Use React Router for navigation between pages.

➡️ API Communication with Axios:
✔ Use Axios to handle all HTTP requests to the backend.

➡️ API Endpoints:
✔ Employee Management:
🔹 POST /api/employees – Add a new employee.
🔹 GET /api/employees/{id}/assignments – Fetch assignments for a specific employee.
🔹 GET /api/employees – Fetch all employees.
🔹 GET /api/employees/{id} – Fetch a specific employee.
🔹 PUT /api/employees/{id} – Update an employee.
🔹 DELETE /api/employees/{id} – Delete an employee (only if not linked to assignments).

✔ Category Management:
🔹 GET /api/categories – Fetch all categories.
🔹 GET /api/categories/{id} – Fetch a specific category.
🔹 POST /api/categories – Create a new category.
🔹 PUT /api/categories/{id} – Update a category.
🔹 DELETE /api/categories/{id} – Delete a category (only if not used in any assignment).

✔ Status Management:
🔹 GET /api/statuses – Fetch all statuses.
🔹 GET /api/statuses/{id} – Fetch a specific status.
🔹 POST /api/statuses – Create a new status.
🔹 PUT /api/statuses/{id} – Update a status.
🔹 DELETE /api/statuses/{id} – Delete a status (only if not linked to assignments).

✔ Assignment Management:
🔹 GET /api/assignments – Fetch all assignments.
🔹 GET /api/assignments/{id} – Fetch a specific assignment.
🔹 POST /api/assignments – Add a new assignment.
🔹 PUT /api/assignments/{id} – Update an assignment.
🔹 DELETE /api/assignments/{id} – Delete an assignment (first removes related records from AssignmentCategories, then deletes the assignment itself).

📌 Technical Requirements:
✅ Backend:
🔹 Implement repositories for Employees, Assignments, Statuses, and Categories.
🔹 Use the Unit of Work pattern to manage transactions between assignments and tags.

✅ Frontend:
🔹 Use TypeScript for strict type checking.
🔹 Build Redux actions, reducers, and selectors for employees, assignments, and categories.

✅ State and Data Flow:
🔹 Use Redux to manage state for assignments, employees and category.
🔹 Implement useSelector()  hooks to fetch filtered data (e.g., assignments by employee or assignments by category).
🔹 Use Redux Thunk or middleware to handle async API calls.

✅ Validation:
🔹 Validate user input the frontend with react hook form with Zod.
🔹 Validate user input the backend with fluent validation.

📌 Optional Stretch Goals:
If time allows, implement the following optional features:

✅ Pagination and Sorting::
🔹 Paginate assignment lists.
🔹 Add sorting (e.g.,by CreatedAt or Title).

✅ Filtering:
🔹 Filter assignments by cateogry or status.

✅ Test Coverage:
✔ Backend Unit and Integration Tests:
🔹 Write unit tests for backend components, such as services and repositories, using a testing framework like xUnit or NUnit.
🔹 Write integration tests to ensure correct interaction between components and the database (e.g., validating repository methods with a test database).

✔ Frontend Jest Tests:
🔹 Write unit tests for Redux reducers, actions, and selectors.
🔹 Write Jest component tests using React Testing Library to validate UI behavior and form input validations.